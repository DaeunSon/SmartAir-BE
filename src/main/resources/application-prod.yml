spring:
  datasource:
    #변경 적용되었는지 확인합니다
    url: jdbc:mysql://${RDS_ENDPOINT}:3306/${MYSQL_DB_NAME}
    username: ${MYSQL_DB_USERNAME} # EC2에 설정된 환경 변수
    password: ${MYSQL_DB_PASSWORD} # EC2에 설정된 환경 변수
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false      # EC2/운영 환경에서는 false 권장
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
  api-docs:
    enabled: true # 필요에 따라 false로 변경 가능
  swagger-ui:
    enabled: true # 필요에 따라 false로 변경 가능

  jwt:
    secret: ${JWT_SECRET} # EC2에 설정된 환경 변수

  security:
    oauth2:
      client:
        # provider 설정은 보통 동일하게 유지
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
        registration:
          kakao:
            client-id: ${KAKAO_CLIENT_ID} # EC2에 설정된 환경 변수
            client-secret: ${KAKAO_CLIENT_SECRET} # EC2에 설정된 환경 변수
            # 중요! EC2의 실제 접속 가능한 리디렉션 URI로 변경
            redirect-uri: ${KAKAO_REDIRECT_URI_EC2_PROD} # 예: http://YOUR_EC2_IP_OR_DOMAIN/login/oauth2/code/kakao
            authorization-grant-type: authorization_code
            client-authentication-method: POST
            client-name: Kakao
            scope:
              - name
              - profile_nickname
              - account_email

logging:
  level:
    root: info # 필요에 따라 warn 등으로 변경 가능

mqtt:
  # EC2에서 접속할 MQTT 브로커 주소로 변경
  url: ${MQTT_URL_EC2_PROD} # 예: tcp://localhost:1883 또는 외부 브로커 주소
  client-id: spring-client-prod # 운영 환경용 고유 ID 권장
  username: ${MQTT_USERNAME_EC2_PROD} # 필요시 설정
  password: ${MQTT_PASSWORD_EC2_PROD} # 필요시 설정 (환경 변수)
  topic: smartair/+/+/airquality

firebase:
  config:
    # EC2 파일 시스템 내의 실제 Firebase 키 파일 경로
    path: ${FIREBASE_CONFIG_PATH} # 예: firebase/firebase.json (src/main/resources 기준) 또는 절대경로

cloud:
  aws:
    s3:
      bucket: ${S3_BUCKET_NAME} # EC2에 설정된 환경 변수
    stack.auto: false
    region.static: ap-northeast-2
    credentials:
      accessKey: ${AWS_S3_ACCESS_KEY_ID} # EC2에 설정된 환경 변수
      secretKey: ${AWS_S3_SECRET_ACCESS_KEY} # EC2에 설정된 환경 변수

thinq:
  api:
    base-url: ${SPRING_THINQ_API_BASE_URL}
    api-key: ${SPRING_THINQ_API_KEY}
    country: ${SPRING_THINQ_API_COUNTRY}
    client-id-prefix: ${SPRING_THINQ_API_CLIENT_ID_PREFIX}

pat:
  secret-key: ${PAT_SECRET_KEY}

# 별도 관리 포트 설정
management:
  server:
    port: 8081
  endpoints:
    web:
      exposure:
        include: health

security:
  require-ssl: false  # 백엔드 서버 자체 SSL 비활성화 (NLB가 이미 처리)
server:
  tomcat:
    remote-ip-header: x-forwarded-for
    protocol-header: x-forwarded-proto
  forward-headers-strategy: native  # X-Forwarded 헤더 신뢰